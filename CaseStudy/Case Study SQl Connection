package util;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

public class PropertyUtil {

    private static final String PROPERTY_FILE = "application.properties"; // keep in project root

    public static Properties loadProperties() {
        Properties properties = new Properties();
        try (FileInputStream input = new FileInputStream(PROPERTY_FILE)) {
            properties.load(input);
        } catch (IOException e) {
            System.err.println("Error loading properties file: " + e.getMessage());
        }
        return properties;
    }
}
package util;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;

public class DBConnection {

    public static Connection getConnection() {
        Connection connection = null;
        try {
            Properties props = PropertyUtil.loadProperties();
            String url = props.getProperty("db.url");
            String username = props.getProperty("db.username");
            String password = props.getProperty("db.password");

            connection = DriverManager.getConnection(url, username, password);
        } catch (SQLException e) {
            System.err.println("Database connection failed: " + e.getMessage());
        }
        return connection;
    }
}
hostname=localhost
dbname=ecommerce
username=root
password=yourpassword
port=3306
package main;

import myexceptions.CustomerNotFoundException;
import myexceptions.ProductNotFoundException;
import myexceptions.OrderNotFoundException;

public class MainApp {
    public static void main(String[] args) {
        try {
            validateCustomerId(5);
            validateProductId(10);
            validateOrderId(15);
        } catch (CustomerNotFoundException | ProductNotFoundException | OrderNotFoundException e) {
            System.out.println(e.getMessage());
        }
    }

    static void validateCustomerId(int customerId) throws CustomerNotFoundException {
        if (customerId != 1) { // Assume only customerId=1 is valid
            throw new CustomerNotFoundException("Customer with ID " + customerId + " not found.");
        }
    }

    static void validateProductId(int productId) throws ProductNotFoundException {
        if (productId != 2) {
            throw new ProductNotFoundException("Product with ID " + productId + " not found.");
        }
    }

    static void validateOrderId(int orderId) throws OrderNotFoundException {
        if (orderId != 3) {
            throw new OrderNotFoundException("Order with ID " + orderId + " not found.");
        }
    }
}
package app;

import service.EcomServiceImpl;
import java.util.Scanner;

public class EcomApp {

    public static void main(String[] args) {

        EcomServiceImpl service = new EcomServiceImpl();
        Scanner sc = new Scanner(System.in);

        while (true) {
            System.out.println("Choose an option:");
            System.out.println("1. Register Customer");
            System.out.println("2. Create Product");
            System.out.println("3. Delete Product");
            System.out.println("4. Add to Cart");
            System.out.println("5. View Cart");
            System.out.println("6. Place Order");
            System.out.println("7. View Customer Order");
            System.out.println("8. Exit");

            int choice = sc.nextInt();

            switch (choice) {
                case 1:
                    service.registerCustomer();
                    break;
                case 2:
                    service.createProduct();
                    break;
                case 3:
                    service.deleteProduct();
                    break;
                case 4:
                    service.addToCart();
                    break;
                case 5:
                    service.viewCart();
                    break;
                case 6:
                    service.placeOrder();
                    break;
                case 7:
                    service.viewCustomerOrder();
                    break;
                case 8:
                    System.out.println("Exiting...");
                    System.exit(0);
                default:
                    System.out.println("Invalid Choice");
            }
        }
    }
}
Create new scratch file from selection
