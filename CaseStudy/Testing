package com.hexaware.ecommerce.test;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import com.hexaware.ecommerce.entity.Product;
import com.hexaware.ecommerce.entity.Cart;
import com.hexaware.ecommerce.entity.Order;
import java.util.Date;

public class EcommerceAppTest {

    // Test for Product created successfully
    @Test
    void testProductCreatedSuccessfully() {
        Product product = new Product(101, "Phone", 699.99, "Smartphone with 5G", 20);
        assertNotNull(product);
        assertEquals(101, product.getProductId());
        assertEquals("Phone", product.getName());
        assertEquals(699.99, product.getPrice());
        assertEquals("Smartphone with 5G", product.getDescription());
        assertEquals(20, product.getStockQuantity());
    }

    // Test for Product added to Cart
    @Test
    void testProductAddedToCartSuccessfully() {
        Product product = new Product(101, "Phone", 699.99, "Smartphone with 5G", 20);
        Cart cart = new Cart(1, 1001, product.getProductId(), 1); // Adding 1 quantity of the product to the cart
        int cartProductId = cart.getProductId();
        int cartQuantity = cart.getQuantity();
        assertEquals(101, cartProductId, "Product ID should be 101");
        assertEquals(1, cartQuantity, "Cart should have 1 quantity of the product");
    }

    // Test for Product ordered successfully
    @Test
    void testProductOrderedSuccessfully() {
       
        Product product = new Product(101, "Phone", 699.99, "Smartphone with 5G", 20);
        int customerId = 1001; 
        double totalPrice = product.getPrice();  
        String shippingAddress = "123 St, City, Country";  
        
       
        int orderId = 1; // Assuming the order ID is 1
        Date orderDate = new Date(); // Current date for the order
        Order order = new Order(orderId, customerId, orderDate, totalPrice, shippingAddress);
        
        
        assertNotNull(order, "Order should not be null.");
        assertEquals(orderId, order.getOrderId(), "Order ID should be 1");
        assertEquals(customerId, order.getCustomerId(), "Customer ID should be 1001");
        assertEquals(totalPrice, order.getTotalPrice(), "Total price should match the product price");
        assertEquals(shippingAddress, order.getShippingAddress(), "Shipping address should match.");
    }
}


