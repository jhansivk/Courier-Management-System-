package service;

import entity.Customer;
import entity.Product;

public class DummyOrderService {
    
    public boolean placeOrder(Customer customer, Product product) {
        if (customer == null || product == null) {
            throw new RuntimeException("Customer or Product not found in database");
        }
        return true;
    }
}
package test;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;
import entity.Customer;
import entity.Product;
import entity.Cart;
import service.DummyOrderService;

public class EcommerceSystemTest {

    DummyOrderService orderService = new DummyOrderService();
    
    // Test case 1: Test that a Product is created successfully.
    @Test
    void testProductCreatedSuccessfully() {
        Product product = new Product(1, "Laptop", 60000.0, "High performance laptop", 10);
        assertNotNull(product, "Product should not be null");
        assertEquals("Laptop", product.getName(), "Product name should be 'Laptop'");
        assertEquals(60000.0, product.getPrice(), "Product price should be 60000.0");
        assertEquals("High performance laptop", product.getDescription(), "Product description mismatch");
        assertEquals(10, product.getStockQuantity(), "Product stock quantity should be 10");
    }
    
    // Test case 2: Test that a product is added to the cart successfully.
    // For simplicity, we assume that creating a Cart object correctly represents adding the product.
    @Test
    void testProductAddedToCartSuccessfully() {
        // Create a Cart object with sample data:
        // cartId = 201, customerId = 101, productId = 1, quantity = 2
        Cart cart = new Cart(201, 101, 1, 2);
        assertEquals(101, cart.getCustomerId(), "Customer ID should be 101");
        assertEquals(1, cart.getProductId(), "Product ID should be 1");
        assertEquals(2, cart.getQuantity(), "Quantity should be 2");
    }
    
    // Test case 3: Test that a product is ordered successfully.
    @Test
    void testProductOrderedSuccessfully() {
        Customer customer = new Customer(101, "John Doe", "john@example.com", "password123");
        Product product = new Product(1, "Laptop", 60000.0, "High performance laptop", 10);
        
        boolean isOrderPlaced = orderService.placeOrder(customer, product);
        assertTrue(isOrderPlaced, "Order should be placed successfully");
    }
    
    // Test case 4: Test that an exception is thrown correctly when customer or product is not found.
    @Test
    void testExceptionThrownWhenCustomerOrProductNotFound() {
        Exception exception = assertThrows(RuntimeException.class, () -> {
            orderService.placeOrder(null, null);
        });
        
        String expectedMessage = "Customer or Product not found in database";
        assertTrue(exception.getMessage().contains(expectedMessage), 
                   "Exception message should indicate missing customer or product");
    }
}

